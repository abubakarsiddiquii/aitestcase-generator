import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { repository, test, branch, token } = await request.json()

    if (!token || !repository || !test) {
      return NextResponse.json({ error: "Missing required data" }, { status: 400 })
    }

    // Create a new branch
    const mainBranchResponse = await fetch(`https://api.github.com/repos/${repository}/git/refs/heads/main`, {
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github.v3+json",
        "User-Agent": "AI-Test-Generator/1.0",
      },
    })

    const mainBranch = await mainBranchResponse.json()
    const baseSha = mainBranch.object.sha

    // Create new branch
    await fetch(`https://api.github.com/repos/${repository}/git/refs`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github.v3+json",
        "Content-Type": "application/json",
        "User-Agent": "AI-Test-Generator/1.0",
      },
      body: JSON.stringify({
        ref: `refs/heads/${branch}`,
        sha: baseSha,
      }),
    })

    // Create file content
    const fileContent = Buffer.from(test.code).toString("base64")

    // Create the test file
    await fetch(`https://api.github.com/repos/${repository}/contents/tests/${test.filename}`, {
      method: "PUT",
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github.v3+json",
        "Content-Type": "application/json",
        "User-Agent": "AI-Test-Generator/1.0",
      },
      body: JSON.stringify({
        message: `Add AI-generated test cases for ${test.filename}`,
        content: fileContent,
        branch: branch,
      }),
    })

    // Create pull request
    const prResponse = await fetch(`https://api.github.com/repos/${repository}/pulls`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/vnd.github.v3+json",
        "Content-Type": "application/json",
        "User-Agent": "AI-Test-Generator/1.0",
      },
      body: JSON.stringify({
        title: `Add AI-generated test cases - ${test.filename}`,
        head: branch,
        base: "main",
        body: `## AI-Generated Test Cases

This PR adds comprehensive test cases generated by AI for the following files:

### Test Framework: ${test.framework}

### Features Covered:
- Unit tests for individual functions
- Integration test scenarios
- Edge case handling
- Error condition testing
- Mock implementations where needed

### Usage:
1. Review the generated test code
2. Install required testing dependencies
3. Run tests using: \`npm test\` or appropriate command
4. Modify tests as needed for your specific requirements

Generated by AI Test Case Generator ðŸ¤–`,
      }),
    })

    const pullRequest = await prResponse.json()

    return NextResponse.json({
      success: true,
      pr_url: pullRequest.html_url,
      pr_number: pullRequest.number,
    })
  } catch (error) {
    console.error("Error creating PR:", error)
    return NextResponse.json({ error: "Failed to create PR" }, { status: 500 })
  }
}
